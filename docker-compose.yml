
services:
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - lakehouse-net


  cassandra:
    image: cassandra:4
    container_name: cassandra
    restart: always
    ports:
      - "9042:9042"
    volumes:
      - cassandradata:/var/lib/cassandra
    networks:
      - lakehouse-net

  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - miniodata:/data
    networks:
      - lakehouse-net

  dremio:
    image: dremio/dremio-oss
    container_name: dremio
    ports:
      - "9047:9047"
      - "31010:31010"
    networks:
      - lakehouse-net

  airflow-init:
      image: apache/airflow:2.9.1-python3.10
      container_name: airflow-init
      environment:
        AIRFLOW__CORE__EXECUTOR: LocalExecutor
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@host.docker.internal:5432/airflow
      volumes:
        - ./dags:/opt/airflow/dags
      entrypoint: >
        /bin/bash -c "
          airflow db init &&
          airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com
        "
      depends_on:
        - dremio
      networks:
        - lakehouse-net

  airflow-webserver:
    build: 
      context: ./infra/airflow
    container_name: airflow-webserver
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@host.docker.internal:5432/airflow
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
      _PIP_ADDITIONAL_REQUIREMENTS: minio==7.1.11
      AIRFLOW__WEBSERVER__SECRET_KEY: supersecretkey
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
    command: webserver
    networks:
      - lakehouse-net

  airflow-scheduler:
    build: 
      context: ./infra/airflow
    container_name: airflow-scheduler
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@host.docker.internal:5432/airflow
      AIRFLOW__WEBSERVER__SECRET_KEY: supersecretkey
    volumes:
      - ./dags:/opt/airflow/dags
    command: scheduler
    networks:
      - lakehouse-net

  airflow-worker-bronze:
    build: 
      context: ./infra/airflow
    restart: always
    depends_on:
      - airflow-webserver
      - airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=supersecretkey
    volumes:
      - ./dags:/opt/airflow/dags
    command: airflow celery worker --queue bronze
  
  airflow-worker-silver:
    build: 
      context: ./infra/airflow
    restart: always
    depends_on:
      - airflow-webserver
      - airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=supersecretkey
    volumes:
      - ./dags:/opt/airflow/dags
    command: airflow celery worker --queue silver

  airflow-worker-gold:
    build: 
      context: ./infra/airflow
    restart: always
    depends_on:
      - airflow-webserver
      - airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=supersecretkey
    volumes:
      - ./dags:/opt/airflow/dags
    command: airflow celery worker --queue gold

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - lakehouse-net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - lakehouse-net

  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-init
    depends_on:
      - kafka
    volumes:
      - ./infra/kafka/init-topics.sh:/init-topics.sh
    entrypoint: ["sh", "-c", "/init-topics.sh"]
    networks:
      - lakehouse-net
    
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - lakehouse-net

  
  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - lakehouse-net
  
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongo
    networks:
      - lakehouse-net


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - lakehouse-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - lakehouse-net

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8083:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - lakehouse-net

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - lakehouse-net

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /etc/promtail:/etc/promtail
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - lakehouse-net

  cassandra-exporter:
    image: criteord/cassandra_exporter:latest
    container_name: cassandra-exporter
    ports:
      - "7070:7070"
    environment:
      - CASSANDRA_EXPORTER_CONFIG_host=cassandra:9042
    depends_on:
      - cassandra
    networks:
      - lakehouse-net

  mongo-exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: mongo-exporter
    command:
      - "--mongodb.uri=mongodb://root:root@mongo:27017"
    ports:
      - "9216:9216"
    depends_on:
      - mongo
    networks:
      - lakehouse-net

volumes:
  cassandradata:
  miniodata:
  grafana-data:

networks:
  lakehouse-net:
    driver: bridge
